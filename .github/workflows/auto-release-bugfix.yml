name: Automated Bugfix Release on Master
on:
    schedule:
        # Noon PST on Tuesday of each week
        - cron: '0 20 * * 2'

jobs:
    create-bugfix-release:
        name: Create a bugfix release
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2
              with:
                  ref: master  # enforce that the release is happening on master

            - run: git fetch origin +refs/tags/*:refs/tags/*

            - uses: actions/setup-python@v1
              with:
                  python-version: 3.7

            - run: python -m pip install --upgrade requests

            - run: |
                # Don't do a bugfix release if master's HEAD already has a tag
                # git-describe exits 0 if a tag is found, 128 if not.
                if ! git describe --exact-match --tags master
                then
                    BUGFIX_VERSION=$(python ci/release/get-release-number.py)

                    # Update the UG hash in the Makefile
                    python ci/release/increment-userguide-revision.py

                    # Update HISTORY with the tag and today's date.
                    python ci/release/update-history.py $BUGFIX_VERSION $(date "+%Y-%m-%d")

                    # Commit changes and make an annotated tag.
                    git commit Makefile HISTORY.rst \
                        -m "Auto-committing updates for the $BUGFIX_VERSION release"
                    git tag -a $BUGFIX_VERSION "$BUGFIX_VERSION release."

                    # Only push revisions needed to push the tag created.
                    git push \
                        https://$GITHUB_ACTOR:$GITHUB_TOKEN@github.com/$GITHUB_REPOSITORY.git\
                        $BUGFIX_VERSION

                    # Create a release object based on the text from HISTORY.
                    # This requires that the tag already exists in the
                    # repository on github.
                    # NOTE: creating a GitHub release creates the tag.
                    #       The InVEST binaries are created in response to
                    #       this release object being created.  See the
                    #       upload-binaries-to-release build job in
                    #       .github/workflows/binary-applications.yml.
                    python ci/release/create-github-release.py \
                        --tag=$BUGFIX_VERSION \
                        --oauthtoken=$GITHUB_TOKEN \
                        --repo=$GITHUB_REPOSITORY
                fi
